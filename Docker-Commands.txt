------------------------------------------------------------------Commands: (Standard)---------------------------------------------------------------------------------
Commands: (Standard)
  build       Build an image from a Dockerfile
  history     Show the history of an image
  import      Import the contents from a tarball to create a filesystem image
  inspect     Display detailed information on one or more images
  load        Load an image from a tar archive or STDIN
  ls          List images
  prune       Remove unused images
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rm          Remove one or more images
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------Docker Commands----------------------------------------------------------------------------------
1- docker -v ---> to see the docker version
2- docker ps ---> to see the current running docker image 
3- docker stop PORT NUMBER ---> to stop the docker container from running
4- docker images ---> to see the docker images that you have
5- docker pull REPOSITORY NAME ---> pull image from repository
6- docker run REPOSITORY NAME ---> you can directly run image from repository
7- docker run -d -p 80:80 docker/getting-started ---> (RUN PULLED IMAGE) This is an Docker repository containing docker image, after running this command go on browser
						       and type link (http://127.0.0.1:80) to see results
8- docker image rm IMAGE ID ---> to remove image from docker
9- docker image rm -f IMAGE ID ---> to remove image forcefully from docker
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------Model Deployment with Docker--------------------------------------------------------------------
FROM python:3.9 ---> Take a docker image of python:3.9
COPY . /app ---> Copy this file (in the current location in Docker)
WORKDIR /app ---> Make it as a Work-Directory
RUN pip install -r requirements.txt ---> Install all mentioned Libraries
EXPOSE $PORT ---> Allocate the Docker container port
CMD gunicorn --workers=4 --bind 0.0.0.0:$PORT MD-APP-15:APP15 ---> [gunicorn = run the application on Heroku], [workers=4 == Handle website traffic in 4 instances]
								   [bind 0.0.0.0.: = run on mentioned port, python file name:Decorator name]